name: CI/CD Pipeline ToDo App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # --- Job 1: Lint & Format Check ---
  lint-format:
    name: Lint & Format Check
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Check Formatting (Prettier)
        # Fails if any file is not formatted
        run: npm run format:check

      - name: Run ESLint & Generate Report
        # Fails if any linting error is found and generates a report
        run: npm run lint:report

      - name: Upload ESLint Report
        uses: actions/upload-artifact@v4.6.2
        if: always() # Upload even if lint/format fails
        with:
          name: eslint-report
          path: eslint-report.json
          retention-days: 1

  # --- Job 2: Build & Unit/Integration Tests ---
  unit-integration-tests:
    name: Build & Unit/Integration Tests
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Application (Verify Compilation)
        run: npm run build

      - name: Run Unit & Integration Tests (Jest) with Coverage
        # Generates reports in ./coverage/
        # Fails if any test fails
        run: npm run test:cov

      - name: Upload Jest Reports
        uses: actions/upload-artifact@v4.6.2
        if: always() # Upload even if tests fail
        with:
          name: jest-reports
          path: |
            coverage/
            coverage/lcov.info
            coverage/junit.xml
          retention-days: 7

      - name: Upload Build Artifact (dist)
        if: success() # Only if build and tests is successful
        uses: actions/upload-artifact@v4.6.2
        with:
          name: dist
          path: dist/
          retention-days: 1

  # --- Job 3: SonarCloud Analysis ---
  sonarcloud-analysis:
    name: SonarCloud Analysis
    needs: [lint-format, unit-integration-tests]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Download ESLint Report
        uses: actions/download-artifact@v4.2.1
        with:
          name: eslint-report

      - name: Download Jest Reports
        uses: actions/download-artifact@v4.2.1
        with:
          name: jest-reports
          path: coverage/

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # --- Job 4: Docker Build, Scan (Trivy) & Push ---
  docker-build-scan-push:
    name: Docker Build, Scan & Push
    needs: [sonarcloud-analysis]
    runs-on: ubuntu-24.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      # Outputs needed for subsequent CD jobs
      repo_name: ${{ steps.set_outputs.outputs.repo_name }}
      image_tag_sha: ${{ steps.set_outputs.outputs.image_tag_sha }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Login to Docker Hub
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Meta # Generate tags and labels
        id: docker_meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
          # Standard tags: sha, latest
          tags: |
            type=sha,format=short,priority=300
            # Add 'latest' ONLY for 'main'
            type=raw,value=latest,enable={{is_default_branch}},priority=100

      - name: Build Docker image and load locally for Trivy
        id: docker_build
        uses: docker/build-push-action@v6.15.0
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          load: true # Build image and upload to runner locally
          push: false # Do not push yet
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.30.0
        with:
          # Scan build image using first tag from docker_meta
          image-ref: ${{ fromJSON(steps.docker_meta.outputs.json).tags[0] }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

      # This only runs if NO vulnerabilities with high/critical severity are found
      - name: Push Docker Image to Docker Hub
        if: success()
        uses: docker/build-push-action@v6.15.0
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          push: true # Push image now
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set Job Outputs
        id: set_outputs
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Setting outputs..."
          echo "repo_name=${{ github.event.repository.name }}" >> "$GITHUB_OUTPUT"
          echo "image_tag_sha=${{ steps.docker_meta.outputs.version }}" >> "$GITHUB_OUTPUT"

  # --- Job 5: Deployment (Staging) ---
  deploy-cfn-staging:
    name: Deploy to Staging
    needs: [docker-build-scan-push]
    runs-on: ubuntu-24.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: ${{ steps.get_cfn_outputs_staging.outputs.alb_url }}
    outputs:
      alb_url_staging: ${{ steps.get_cfn_outputs_staging.outputs.alb_url }}
      cluster_name_staging: ${{ steps.get_cfn_outputs_staging.outputs.cluster_name }}
      service_name_staging: ${{ steps.get_cfn_outputs_staging.outputs.service_name }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Deploy CloudFormation Staging Stack
        id: deploy_cfn_staging
        run: |
          echo "Deploying CloudFormation stack for Staging..."
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.docker-build-scan-push.outputs.repo_name }}"
          IMAGE_TAG_SHA="${{ needs.docker-build-scan-push.outputs.image_tag_sha }}"

          # Verify that the image name and tag are not empty
          if [ -z "$IMAGE_NAME" ]; then echo "::error::Image Name output from previous job is empty!" && exit 1; fi
          if [ -z "$IMAGE_TAG_SHA" ]; then echo "::error::Image Tag SHA output from previous job is empty!" && exit 1; fi

          IMAGE_URI="${IMAGE_NAME}:${IMAGE_TAG_SHA}"
          echo "Deploying Image URI to Staging: $IMAGE_URI"

          aws cloudformation deploy \
              --template-file template.yml \
              --stack-name todo-app-staging-stack \
              --parameter-overrides \
                EnvironmentName=staging \
                DockerImageUri=${IMAGE_URI} \
                LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
                VpcId=${{ secrets.VPC_ID }} \
                SubnetIds="${{ secrets.SUBNET_IDS }}" \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --no-fail-on-empty-changes \
              --region us-east-1

      - name: Get Staging Stack Outputs
        # Only runs if the previous step was successful
        if: steps.deploy_cfn_staging.outcome == 'success'
        id: get_cfn_outputs_staging
        run: |
          echo "Fetching Staging stack outputs..."
          # Install jq if needed
          if ! command -v jq &> /dev/null; then sudo apt-get update && sudo apt-get install -y jq; fi

          STACK_OUTPUTS=$(aws cloudformation describe-stacks --stack-name todo-app-staging-stack --query "Stacks[0].Outputs" --region us-east-1 --output json)
          echo "Raw Staging Stack Outputs: $STACK_OUTPUTS"

          CLUSTER_NAME=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ECSClusterName") | .OutputValue')
          SERVICE_NAME=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ECSServiceName") | .OutputValue')
          ALB_DNS=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ALBDnsName") | .OutputValue')

          if [ -z "$ALB_DNS" ] || [ "$ALB_DNS" == "null" ]; then echo "Error: Staging ALBDnsName not found." && exit 1; fi
          if [ -z "$CLUSTER_NAME" ] || [ "$CLUSTER_NAME" == "null" ]; then echo "Error: Staging ECSClusterName not found." && exit 1; fi
          if [ -z "$SERVICE_NAME" ] || [ "$SERVICE_NAME" == "null" ]; then echo "Error: Staging ECSServiceName not found." && exit 1; fi

          echo "cluster_name=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
          echo "service_name=${SERVICE_NAME}" >> $GITHUB_OUTPUT
          echo "alb_url=http://${ALB_DNS}" >> $GITHUB_OUTPUT
          echo "Staging Outputs Set: Cluster=${CLUSTER_NAME}, Service=${SERVICE_NAME}, URL=http://${ALB_DNS}/"

  # --- Job 6: Update Staging Service & Force New Deployment ---
  update-service-staging:
    name: Update Staging Service
    needs: [deploy-cfn-staging]
    runs-on: ubuntu-24.04
    environment: staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Force New Deployment ECS Service Staging & Wait
        run: |
          echo "Forcing new deployment for Staging service..."
          CLUSTER_NAME="${{ needs.deploy-cfn-staging.outputs.cluster_name_staging }}"
          SERVICE_NAME="${{ needs.deploy-cfn-staging.outputs.service_name_staging }}"
          echo "Updating Staging Service: Cluster=$CLUSTER_NAME, Service=$SERVICE_NAME"
          aws ecs update-service --cluster $CLUSTER_NAME \
                                --service $SERVICE_NAME \
                                --force-new-deployment \
                                --region us-east-1
          echo "Waiting for Staging service deployment to stabilize..."
          aws ecs wait services-stable --cluster $CLUSTER_NAME --services $SERVICE_NAME --region us-east-1
          echo "Staging service deployment stable."

  # --- Job 7: Run Acceptance Tests on Staging ---
  test-staging:
    name: Run Acceptance Tests on Staging
    needs: [update-service-staging, deploy-cfn-staging]
    runs-on: ubuntu-24.04
    environment: staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Install Dependencies & Playwright Browsers
        run: |
          npm ci
          npm run test:e2e:setup

      - name: Run Acceptance Tests against Staging
        env:
          APP_BASE_URL: ${{ needs.deploy-cfn-staging.outputs.alb_url_staging }}
        run: |
          echo "Running acceptance tests against Staging : $APP_BASE_URL..."
          sleep 30 # Give ALB time to register healthy targets
          npm run test:acceptance

  # --- Job 8: Deploy Infrastructure to Production ---
  deploy-cfn-prod:
    name: Deploy to Production
    needs: [docker-build-scan-push, test-staging]
    runs-on: ubuntu-24.04
    environment:
      name: production
      url: ${{ steps.get_cfn_outputs_prod.outputs.alb_url }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      alb_url_prod: ${{ steps.get_cfn_outputs_prod.outputs.alb_url }}
      cluster_name_prod: ${{ steps.get_cfn_outputs_prod.outputs.cluster_name }}
      service_name_prod: ${{ steps.get_cfn_outputs_prod.outputs.service_name }}
      deploying_task_def_arn_prod: ${{ steps.get_cfn_outputs_prod.outputs.task_def_arn }}
      previous_task_def_arn_prod: ${{ steps.get_previous_task_def.outputs.previous_task_def_arn }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Get Current Stable Production Task Definition ARN (for rollback)
        id: get_previous_task_def
        run: |
          # Get the cluster and service names from the production stack
          CLUSTER_NAME_QUERY=$(aws cloudformation describe-stacks --stack-name todo-app-prod-stack --query "Stacks[0].Outputs[?OutputKey=='ECSClusterName'].OutputValue" --output text --region us-east-1 2>/dev/null || echo "NOT_FOUND")
          SERVICE_NAME_QUERY=$(aws cloudformation describe-stacks --stack-name todo-app-prod-stack --query "Stacks[0].Outputs[?OutputKey=='ECSServiceName'].OutputValue" --output text --region us-east-1 2>/dev/null || echo "NOT_FOUND")

          if [ "$CLUSTER_NAME_QUERY" == "NOT_FOUND" ] || [ "$SERVICE_NAME_QUERY" == "NOT_FOUND" ]; then
            echo "Production stack/service not found or first deployment. Setting previous ARN to NONE."
            echo "previous_task_def_arn=NONE" >> $GITHUB_OUTPUT
          else
            PREVIOUS_TASK_DEF_ARN=$(aws ecs describe-services --cluster "$CLUSTER_NAME_QUERY" --services "$SERVICE_NAME_QUERY" --query "services[0].taskDefinition" --output text --region us-east-1)
            if [ -z "$PREVIOUS_TASK_DEF_ARN" ]; then
               echo "Warning: Could not get previous task definition ARN. Setting to NONE."
               echo "previous_task_def_arn=NONE" >> $GITHUB_OUTPUT
            else
               echo "Previous stable Task Definition ARN: $PREVIOUS_TASK_DEF_ARN"
               echo "previous_task_def_arn=$PREVIOUS_TASK_DEF_ARN" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Deploy/Update CloudFormation Production Stack
        run: |
          # echo "Deploying CloudFormation stack for Deploy... Using the same tag sha deployed in STG"
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.docker-build-scan-push.outputs.repo_name }}"
          IMAGE_TAG="${{ needs.docker-build-scan-push.outputs.image_tag_sha }}"
          IMAGE_URI="${IMAGE_NAME}:${IMAGE_TAG}"
          echo "Deploying Image URI to Production: $IMAGE_URI"

          aws cloudformation deploy \
              --template-file template.yml \
              --stack-name todo-app-prod-stack \
              --parameter-overrides \
                EnvironmentName=production \
                DockerImageUri=${IMAGE_URI} \
                LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
                VpcId=${{ secrets.VPC_ID }} \
                SubnetIds="${{ secrets.SUBNET_IDS }}" \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --no-fail-on-empty-changes \
              --region us-east-1

      - name: Get Production Stack Outputs and New Task Definition
        # Only runs if the previous step (CFN Prod) was successful
        id: get_cfn_outputs_prod
        run: |
          echo "Fetching Production stack outputs..."
          if ! command -v jq &> /dev/null; then sudo apt-get update && sudo apt-get install -y jq; fi
          STACK_OUTPUTS=$(aws cloudformation describe-stacks --stack-name todo-app-prod-stack --query "Stacks[0].Outputs" --region us-east-1 --output json)
          echo "Raw Production Stack Outputs: $STACK_OUTPUTS"

          CLUSTER_NAME=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ECSClusterName") | .OutputValue')
          SERVICE_NAME=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ECSServiceName") | .OutputValue')
          ALB_DNS=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ALBDnsName") | .OutputValue')

          if [ -z "$ALB_DNS" ] || [ "$ALB_DNS" == "null" ]; then echo "Error: Production ALBDnsName not found." && exit 1; fi
          if [ -z "$CLUSTER_NAME" ] || [ "$CLUSTER_NAME" == "null" ]; then echo "Error: Production ECSClusterName not found." && exit 1; fi
          if [ -z "$SERVICE_NAME" ] || [ "$SERVICE_NAME" == "null" ]; then echo "Error: Production ECSServiceName not found." && exit 1; fi

          echo "cluster_name=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
          echo "service_name=${SERVICE_NAME}" >> $GITHUB_OUTPUT
          echo "alb_url=http://${ALB_DNS}" >> $GITHUB_OUTPUT
          echo "Production Outputs Set: Cluster=${CLUSTER_NAME}, Service=${SERVICE_NAME}, URL=http://${ALB_DNS}/"

          # Obtener el ARN de la Task Def que CFN ACABA de configurar
          TASK_DEF_ARN=$(aws ecs describe-services --cluster "$CLUSTER_NAME" --services "$SERVICE_NAME" --query "services[0].taskDefinition" --output text --region us-east-1)
          if [ -z "$TASK_DEF_ARN" ]; then echo "::error::Could not get NEW Task Definition ARN for production service." && exit 1; fi
          echo "Production Task Definition ARN for this deployment: $TASK_DEF_ARN"
          # ... (echo outputs a GITHUB_OUTPUT, incluyendo task_def_arn) ...
          echo "task_def_arn=${TASK_DEF_ARN}" >> $GITHUB_OUTPUT

  # --- Job 9: Update Production Service & Force New Deployment ---
  update-service-prod:
    name: Update Production Service
    needs: [docker-build-scan-push, deploy-cfn-prod]
    runs-on: ubuntu-24.04
    environment: production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Force New Deployment ECS Service Production & Wait
        run: |
          echo "Forcing new deployment for Production service..."
          CLUSTER_NAME="${{ needs.deploy-cfn-prod.outputs.cluster_name_prod }}"
          SERVICE_NAME="${{ needs.deploy-cfn-prod.outputs.service_name_prod }}"
          TASK_DEF_ARN="${{ needs.deploy-cfn-prod.outputs.deploying_task_def_arn_prod }}"

          echo "Updating Production Service: Cluster=$CLUSTER_NAME, Service=$SERVICE_NAME"
          aws ecs update-service --cluster $CLUSTER_NAME \
                                --service $SERVICE_NAME \
                                --task-definition "$TASK_DEF_ARN" \
                                --force-new-deployment \
                                --region us-east-1
          echo "Waiting for Production service deployment to stabilize..."
          aws ecs wait services-stable --cluster $CLUSTER_NAME --services $SERVICE_NAME --region us-east-1
          echo "Production service deployment stable."

  # --- Job 10: Run Smoke Tests on Production ---
  smoke-test-prod:
    name: Run Smoke Tests on Production
    needs: [update-service-prod, deploy-cfn-prod]
    runs-on: ubuntu-24.04
    environment: production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Install Dependencies & Playwright Browsers
        run: |
          npm ci
          npm run test:e2e:setup

      - name: Run Smoke Tests against Production
        env:
          APP_BASE_URL: ${{ needs.deploy-cfn-prod.outputs.alb_url_prod }}
        run: |
          echo "Running smoke tests against Production : $APP_BASE_URL..."
          sleep 30 # Give ALB time to register healthy targets
          npm run test:smoke

  # --- Job 11: Initiate Rollback Production if Smoke Tests got failure- ---
  rollback-prod:
    name: Rollback Production Deployment
    needs: [smoke-test-prod, deploy-cfn-prod]
    runs-on: ubuntu-24.04
    environment: production
    # This job will only run if the previous job (smoke-test-prod) fails
    if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Initiate Rollback Based on Previous Stable Task Definition
        run: |
          # To get the necessary data from previous jobs.
          CLUSTER_NAME="${{ needs.deploy-cfn-prod.outputs.cluster_name_prod }}"
          SERVICE_NAME="${{ needs.deploy-cfn-prod.outputs.service_name_prod }}"
          PREVIOUS_STABLE_TASK_DEF_ARN="${{ needs.deploy-cfn-prod.outputs.previous_task_def_arn_prod }}"

          echo "::warning::Smoke tests failed! Initiating rollback procedure..."
          if [ "$PREVIOUS_STABLE_TASK_DEF_ARN" == "NONE" ]; then
            echo "::error::CRITICAL: Previous stable task definition ARN ('$PREVIOUS_STABLE_TASK_DEF_ARN') is not available. Cannot perform automated rollback." 
            exit 1
          fi

          echo "Rolling back Production service to Task Definition: $PREVIOUS_STABLE_TASK_DEF_ARN"

          # 1. Describe la definición de tarea BUENA ANTERIOR para obtener su JSON
          echo "Describing previous stable task definition: $PREVIOUS_STABLE_TASK_DEF_ARN"
          TASK_DEFINITION_JSON=$(aws ecs describe-task-definition --task-definition "$PREVIOUS_STABLE_TASK_DEF_ARN" --query 'taskDefinition' --output json --region us-east-1)

          if [ -z "$TASK_DEFINITION_JSON" ] || [ "$TASK_DEFINITION_JSON" == "null" ]; then
            echo "::error::Failed to describe previous stable task definition $PREVIOUS_STABLE_TASK_DEF_ARN. It might have been deleted or is inaccessible."
            exit 1
          fi

          # 2. Prepara el JSON para registrar una NUEVA revisión basada en la anterior
          #    Eliminando campos que no se permiten en register-task-definition
          echo "Preparing JSON for new task definition based on $PREVIOUS_STABLE_TASK_DEF_ARN..."
          if ! command -v jq &> /dev/null; then sudo apt-get update && sudo apt-get install -y jq; fi

          # Quitamos los campos no necesarios y MANTENEMOS la imagen original 
          NEW_TASK_DEF_INPUT=$(echo $TASK_DEFINITION_JSON | jq '
            del(.taskDefinitionArn) |
            del(.revision) |
            del(.status) |
            del(.requiresAttributes) |
            del(.compatibilities) |
            del(.registeredAt) |
            del(.registeredBy) |
            del(.deregisteredAt) 
          ')

          if [ -z "$NEW_TASK_DEF_INPUT" ]; then echo "::error::Error preparing new task definition JSON for rollback." && exit 1; fi
          # echo "Registering Task Definition with payload: $NEW_TASK_DEF_INPUT" # Debug

          # 3. Registra la NUEVA revisión, que es una copia ACTIVA de la anterior
          echo "Registering new task definition based on previous stable version..."
          REGISTER_OUTPUT=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF_INPUT" --region us-east-1)
          ROLLBACK_TASK_DEF_ARN=$(echo $REGISTER_OUTPUT | jq -r '.taskDefinition.taskDefinitionArn')

          if [ -z "$ROLLBACK_TASK_DEF_ARN" ] || [ "$ROLLBACK_TASK_DEF_ARN" == "null" ]; then
             echo "::error::Error registering rollback task definition."
             exit 1
          fi
          echo "Successfully registered Rollback Task Definition: $ROLLBACK_TASK_DEF_ARN"

          # 4. Actualiza el servicio para usar la NUEVA revisión registrada basada en la revisión estable anterior
          echo "Updating service $SERVICE_NAME to use Rollback Task Definition $ROLLBACK_TASK_DEF_ARN..."
          aws ecs update-service --cluster "$CLUSTER_NAME" \
                                 --service "$SERVICE_NAME" \
                                 --task-definition "$ROLLBACK_TASK_DEF_ARN" \
                                 --force-new-deployment \
                                 --region us-east-1

          # 5. Espera a que el rollback se estabilice
          echo "Waiting for rollback deployment to stabilize..."
          aws ecs wait services-stable --cluster "$CLUSTER_NAME" --services "$SERVICE_NAME" --region us-east-1
          echo "Service $SERVICE_NAME rollback attempt finished."
          echo "Service is now configured to run Task Definition: $ROLLBACK_TASK_DEF_ARN (originally based on $PREVIOUS_STABLE_TASK_DEF_ARN)."

          echo "::error::Pipeline finished with rollback due to smoke test failure."
          exit 1
