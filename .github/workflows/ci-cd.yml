name: CI/CD Pipeline ToDo App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # --- Job 1: Lint & Format Check ---
  lint-format:
    name: Lint & Format Check
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Check Formatting (Prettier)
        # Fails if any file is not formatted
        run: npm run format:check

      - name: Run ESLint & Generate Report
        # Fails if any linting error is found and generates a report
        run: npm run lint:report

      - name: Upload ESLint Report
        uses: actions/upload-artifact@v4.6.2
        if: always() # Upload even if lint/format fails
        with:
          name: eslint-report
          path: eslint-report.json
          retention-days: 1

  # --- Job 2: Build & Unit/Integration Tests ---
  unit-integration-tests:
    name: Build & Unit/Integration Tests
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Application (Verify Compilation)
        run: npm run build

      - name: Run Unit & Integration Tests (Jest) with Coverage
        # Generates reports in ./coverage/
        # Fails if any test fails
        run: npm run test:cov

      - name: Upload Jest Reports
        uses: actions/upload-artifact@v4.6.2
        if: always() # Upload even if tests fail
        with:
          name: jest-reports
          path: |
            coverage/
            coverage/lcov.info
            coverage/junit.xml
          retention-days: 7

      #- name: Upload Build Artifact (dist)
      #  if: success() # Only if build and tests is successful
      #  uses: actions/upload-artifact@v4.6.2
      #  with:
      #    name: dist
      #    path: dist/
      #    retention-days: 1

  # --- Job 3: SonarCloud Analysis ---
  sonarcloud-analysis:
    name: SonarCloud Analysis
    needs: [lint-format, unit-integration-tests]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Download ESLint Report
        uses: actions/download-artifact@v4.2.1
        with:
          name: eslint-report

      - name: Download Jest Reports
        uses: actions/download-artifact@v4.2.1
        with:
          name: jest-reports
          path: coverage/

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # --- Job 4: Docker Build, Scan (Trivy) & Push ---
  docker-build-scan-push:
    name: Docker Build, Scan & Push
    needs: [sonarcloud-analysis]
    runs-on: ubuntu-24.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      # Outputs needed for subsequent CD jobs
      repo_name: ${{ steps.set_outputs.outputs.repo_name }}
      image_tag_sha: ${{ steps.set_outputs.outputs.image_tag_sha }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Login to Docker Hub
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Meta # Generate tags and labels
        id: docker_meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
          # Standard tags: sha, latest
          tags: |
            type=sha,format=short,priority=300
            # Add 'latest' ONLY for 'main'
            type=raw,value=latest,enable={{is_default_branch}},priority=100

      - name: Build Docker image and load locally for Trivy
        id: docker_build
        uses: docker/build-push-action@v6.15.0
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          load: true # Build image and upload to runner locally
          push: false # Do not push yet
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.30.0
        with:
          # Scan build image using first tag from docker_meta
          image-ref: ${{ fromJSON(steps.docker_meta.outputs.json).tags[0] }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

      # This only runs if NO vulnerabilities with high/critical severity are found
      - name: Push Docker Image to Docker Hub
        if: success()
        uses: docker/build-push-action@v6.15.0
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          push: true # Push image now
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set Job Outputs
        id: set_outputs
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Setting outputs..."
          echo "repo_name=${{ github.event.repository.name }}" >> "$GITHUB_OUTPUT"
          echo "image_tag_sha=${{ steps.docker_meta.outputs.version }}" >> "$GITHUB_OUTPUT"

  # --- Job 5: Deploy/Update Staging Infrastructure & Wait ---
  deploy-cfn-staging:
    name: Deploy Staging
    needs: [docker-build-scan-push]
    runs-on: ubuntu-24.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: ${{ steps.get_cfn_outputs_staging.outputs.alb_url_8080 }}
    outputs:
      alb_url_staging_80: ${{ steps.get_cfn_outputs_staging.outputs.alb_url_80 }}
      alb_url_staging_8080: ${{ steps.get_cfn_outputs_staging.outputs.alb_url_8080 }}
      cluster_name_staging: ${{ steps.get_cfn_outputs_staging.outputs.cluster_name }}
      service_name_staging: ${{ steps.get_cfn_outputs_staging.outputs.service_name }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Deploy CFN Staging Stack
        id: deploy_cfn_staging
        run: |
          echo "Deploying CloudFormation stack for Staging..."
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.docker-build-scan-push.outputs.repo_name }}"
          IMAGE_TAG_SHA="${{ needs.docker-build-scan-push.outputs.image_tag_sha }}"

          # Verify that the image name and tag are not empty
          if [ -z "$IMAGE_NAME" ]; then echo "::error::Image Name output from previous job is empty!" && exit 1; fi
          if [ -z "$IMAGE_TAG_SHA" ]; then echo "::error::Image Tag SHA output from previous job is empty!" && exit 1; fi

          IMAGE_URI="${IMAGE_NAME}:${IMAGE_TAG_SHA}"
          echo "Deploying Image URI to Staging: $IMAGE_URI"

          aws cloudformation deploy \
              --template-file template.yml \
              --stack-name todo-app-staging-stack \
              --parameter-overrides \
                EnvironmentName=staging \
                DockerImageUri=${IMAGE_URI} \
                LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
                VpcId=${{ secrets.VPC_ID }} \
                SubnetIds="${{ secrets.SUBNET_IDS }}" \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --no-fail-on-empty-changes \
              --region us-east-1
          echo "CloudFormation deploy command finished for Staging."

      - name: Wait Staging Service Stability & Get Outputs
        # Only runs if the previous step was successful
        if: steps.deploy_cfn_staging.outcome == 'success'
        id: get_cfn_outputs_staging
        run: |
          echo "Fetching Staging stack outputs after Deploy..."
          # Install jq if needed
          if ! command -v jq &> /dev/null; then sudo apt-get update && sudo apt-get install -y jq; fi
          STACK_NAME="todo-app-staging-stack"
          STACK_OUTPUTS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME  --query "Stacks[0].Outputs" --region us-east-1 --output json)
          echo "Raw Staging Stack Outputs: $STACK_OUTPUTS"

          CLUSTER_NAME=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ECSClusterName") | .OutputValue // empty')
          SERVICE_NAME=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ECSServiceName") | .OutputValue // empty')
          if [ -z "$CLUSTER_NAME" ] || [ "$CLUSTER_NAME" == "null" ]; then echo "Error: Staging ECSClusterName not found." && exit 1; fi
          if [ -z "$SERVICE_NAME" ] || [ "$SERVICE_NAME" == "null" ]; then echo "Error: Staging ECSServiceName not found." && exit 1; fi

          echo "Waiting for service '$SERVICE_NAME' in cluster '$CLUSTER_NAME' to stabilize..."
          aws ecs wait services-stable --cluster "$CLUSTER_NAME" --services "$SERVICE_NAME" --region us-east-1 || \
            (echo "::error::ECS service failed to stabilize in Staging!" && exit 1)
          echo "Staging ECS service is stable."

          # Get Outputs 
          ALB_DNS=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ALBDnsName") | .OutputValue // empty')
          PROD_PORT=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ProductionUrl") | .OutputValue | split(":")[2] // "80"')
          TEST_PORT=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="TestUrl") | .OutputValue | split(":")[2] // "8080"')

          # Validate required outputs for URLs
          if [ -z "$ALB_DNS" ] || [ "$ALB_DNS" == "null" ]; then echo "Error: Staging ALBDnsName not found." && exit 1; fi
          if [ -z "$PROD_PORT" ] || [ "$PROD_PORT" == "null" ]; then echo "Error: Staging ProductionUrl not found." && exit 1; fi
          if [ -z "$TEST_PORT" ] || [ "$TEST_PORT" == "null" ]; then echo "Error: Staging TestUrl not found." && exit 1; fi

          # Generate outputs of the next jobs
          echo "cluster_name=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
          echo "service_name=${SERVICE_NAME}" >> $GITHUB_OUTPUT
          echo "alb_url_80=http://${ALB_DNS}:${PROD_PORT:-80}" >> $GITHUB_OUTPUT # URL Principal (Blue TG)
          echo "alb_url_8080=http://${ALB_DNS}:${TEST_PORT:-8080}" >> $GITHUB_OUTPUT # URL Test (Green TG)
          echo "Staging Outputs Set."

  # --- Job 6: Run Acceptance Tests on Staging (Green TG) ---
  test-staging:
    name: Run Acceptance Tests on Staging
    needs: [deploy-cfn-staging]
    runs-on: ubuntu-24.04
    environment: staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Install Dependencies & Playwright Browsers
        run: |
          npm ci
          npm run test:e2e:setup

      - name: Run Acceptance Tests against Staging Green Target
        env:
          APP_BASE_URL: ${{ needs.deploy-cfn-staging.outputs.alb_url_staging_8080 }}
        run: |
          echo "Running acceptance tests against Staging Green Target: $APP_BASE_URL..."
          sleep 30 # Give ALB time to register healthy targets
          npm run test:acceptance

  # --- Job 7: Deploy/Update Production Infrastructure & Wait ---
  deploy-cfn-prod:
    name: Deploy Production
    needs: [docker-build-scan-push, test-staging]
    runs-on: ubuntu-24.04
    environment:
      name: production
      url: ${{ steps.get_cfn_outputs_prod.outputs.production_url }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      cluster_name_prod: ${{ steps.get_cfn_outputs_prod.outputs.cluster_name }}
      service_name_prod: ${{ steps.get_cfn_outputs_prod.outputs.service_name }}
      listener_prod_arn_prod: ${{ steps.get_cfn_outputs_prod.outputs.listener_prod_arn  }}
      listener_test_arn_prod: ${{ steps.get_cfn_outputs_prod.outputs.listener_test_arn }}
      tg_blue_arn_prod: ${{ steps.get_cfn_outputs_prod.outputs.tg_blue_arn }}
      tg_green_arn_prod: ${{ steps.get_cfn_outputs_prod.outputs.tg_green_arn }}
      task_family_prod: ${{ steps.get_cfn_outputs_prod.outputs.task_family }}
      currently_active_tg_arn_prod: ${{ steps.get_cfn_outputs_prod.outputs.currently_active_tg_arn }} # TG activo ANTES
      production_url_prod: ${{ steps.get_cfn_outputs_prod.outputs.production_url }}
      test_url_prod: ${{ steps.get_cfn_outputs_prod.outputs.test_url }} # URL para probar Green TG
      #deployed_task_def_arn_prod: ${{ steps.wait_and_get_outputs_prod.outputs.deployed_task_def_arn }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Deploy CFN Production Stack
        id: deploy_cfn_prod
        run: |
          echo "Deploying CloudFormation stack for Production... Using the same tag sha deployed in STG"
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.docker-build-scan-push.outputs.repo_name }}"
          IMAGE_TAG_SHA="${{ needs.docker-build-scan-push.outputs.image_tag_sha }}"

          # Verify that the image name and tag are not empty
          if [ -z "$IMAGE_NAME" ]; then echo "::error::Image Name output from previous job is empty!" && exit 1; fi
          if [ -z "$IMAGE_TAG_SHA" ]; then echo "::error::Image Tag SHA output from previous job is empty!" && exit 1; fi

          IMAGE_URI="${IMAGE_NAME}:${IMAGE_TAG_SHA}"
          echo "Deploying Image URI to Production: $IMAGE_URI"

          aws cloudformation deploy \
              --template-file template.yml \
              --stack-name todo-app-prod-stack \
              --parameter-overrides \
                EnvironmentName=production \
                DockerImageUri=${IMAGE_URI} \
                LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
                VpcId=${{ secrets.VPC_ID }} \
                SubnetIds="${{ secrets.SUBNET_IDS }}" \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --no-fail-on-empty-changes \
              --region us-east-1
          echo "CloudFormation deploy command finished for Production."

      - name: Wait Production Service Stability & Get Outputs/State
        # Only runs if the previous step (CFN Prod) was successful
        id: get_cfn_outputs_prod
        if: steps.deploy_cfn_prod.outcome == 'success'
        run: |
          echo "Fetching Production stack outputs..."
          # Install jq if needed
          if ! command -v jq &> /dev/null; then sudo apt-get update && sudo apt-get install -y jq; fi
          STACK_NAME="todo-app-prod-stack"
          STACK_OUTPUTS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs" --region us-east-1 --output json)
          echo "Raw Production Stack Outputs: $STACK_OUTPUTS"

          CLUSTER_NAME=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ECSClusterName") | .OutputValue')
          SERVICE_NAME=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ECSServiceName") | .OutputValue')
          if [ -z "$CLUSTER_NAME" ] || [ "$CLUSTER_NAME" == "null" ]; then echo "Error: Production ECSClusterName not found." && exit 1; fi
          if [ -z "$SERVICE_NAME" ] || [ "$SERVICE_NAME" == "null" ]; then echo "Error: Production ECSServiceName not found." && exit 1; fi

          echo "Waiting for service '$SERVICE_NAME' in cluster '$CLUSTER_NAME' to stabilize..."
          # Add timeout
          aws ecs wait services-stable --cluster $CLUSTER_NAME --services $SERVICE_NAME --region us-east-1 || \
            (echo "::error::ECS service failed to stabilize in Production!" && exit 1)
          echo "Production ECS service is stable."

          # Get Outputs 
          ALB_DNS=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ALBDnsName") | .OutputValue')
          LISTENER_PROD_ARN=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ListenerArnProd") | .OutputValue')
          LISTENER_TEST_ARN=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ListenerArnTest") | .OutputValue') # Output del Listener de Test (8080)
          TG_BLUE_ARN=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="TargetGroupArnBlue") | .OutputValue')
          TG_GREEN_ARN=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="TargetGroupArnGreen") | .OutputValue')
          ALB_DNS=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ALBDnsName") | .OutputValue // empty')
          PROD_PORT=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ProductionUrl") | .OutputValue | split(":")[2] // "80"')
          TEST_PORT=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="TestUrl") | .OutputValue | split(":")[2] // "8080"')

          # Validate key outputs
          for val_key in LISTENER_PROD_ARN LISTENER_TEST_ARN TG_BLUE_ARN TG_GREEN_ARN ALB_DNS PROD_PORT TEST_PORT; do
              val=$(eval echo "\$$val_key") # Obtener valor de la variable
              if [ -z "$val" ] || [ "$val" == "null" ]; then echo "::error::Failed to get output $val_key from stack $STACK_NAME" && exit 1; fi
          done

          # --- Guardar ARN Estable en SSM (Opcional pero buena práctica) ---
          STABLE_TASK_DEF_ARN=$(aws ecs describe-services --cluster "$CLUSTER_NAME" --services "$SERVICE_NAME" --query "services[0].taskDefinition" --output text --region us-east-1)
          PARAMETER_NAME="/todo-app/prod/stable-task-definition-arn"
          if [ -n "$STABLE_TASK_DEF_ARN" ] && [ "$STABLE_TASK_DEF_ARN" != "null" ]; then
              echo "Storing stable Task Definition ARN $STABLE_TASK_DEF_ARN in SSM parameter: $PARAMETER_NAME"
              aws ssm put-parameter --name "$PARAMETER_NAME" --value "$STABLE_TASK_DEF_ARN" --type String --overwrite --region us-east-1 || \
                echo "::warning::Failed to store Task Definition ARN in SSM."
          else
              echo "::warning::Could not get stable task definition ARN after deployment. Cannot record stable deployment for future rollback via SSM."
          fi
          #echo "deployed_task_def_arn=${STABLE_TASK_DEF_ARN:-NONE}" >> $GITHUB_OUTPUT

          echo "Determining active target group for Production Listener ($LISTENER_PROD_ARN)..."
          CURRENTLY_ACTIVE_TG_ARN=$(aws elbv2 describe-listeners --listener-arns $LISTENER_PROD_ARN --query 'Listeners[0].DefaultActions[0].TargetGroupArn' --output text --region us-east-1)
          echo "Currently active TG ARN: $CURRENTLY_ACTIVE_TG_ARN"

          # Generate outputs of the next jobs
          echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "listener_prod_arn=$LISTENER_PROD_ARN" >> $GITHUB_OUTPUT
          echo "listener_test_arn=$LISTENER_TEST_ARN" >> $GITHUB_OUTPUT
          echo "tg_blue_arn=$TG_BLUE_ARN" >> $GITHUB_OUTPUT
          echo "tg_green_arn=$TG_GREEN_ARN" >> $GITHUB_OUTPUT
          echo "currently_active_tg_arn=$CURRENTLY_ACTIVE_TG_ARN" >> $GITHUB_OUTPUT
          echo "production_url=http://${ALB_DNS}:${PROD_PORT:-80}" >> $GITHUB_OUTPUT
          echo "test_url=http://${ALB_DNS}:${TEST_PORT:-8080}" >> $GITHUB_OUTPUT
          echo "Production Outputs & State Set."

  # --- Job 8: Run Smoke Tests on Production (Green Target) ---
  smoke-test-prod:
    name: Run Smoke Tests on Production (Green TG)
    needs: [deploy-cfn-prod]
    runs-on: ubuntu-24.04
    environment: production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Install Dependencies & Playwright Browsers
        run: |
          npm ci
          npm run test:e2e:setup

      - name: Run Smoke Tests against Production Green Target
        env:
          # Use URL 8080 (Green TG) from the previous job
          APP_BASE_URL: ${{ needs.deploy-cfn-prod.outputs.test_url_prod }}
        run: |
          echo "Running smoke tests against Production : $APP_BASE_URL..."
          sleep 30 # Give ALB time to register healthy targets
          npm run test:smoke

  # --- Job 9: Promote Production (Switch Traffic) ---
  promote-prod:
    name: Promote Production (Switch Listeners)
    needs: [smoke-test-prod, deploy-cfn-prod]
    runs-on: ubuntu-latest
    environment: production # MANUAL APPROVAL could act here..
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Switch Production Listener Traffic to Green TG
        id: switch_prod
        run: |
          echo "Promoting GREEN Target Group to production..."
          LISTENER_PROD_ARN="${{ needs.deploy-cfn-prod.outputs.listener_prod_arn_prod }}"
          TARGET_TG_ARN="${{ needs.deploy-cfn-prod.outputs.tg_green_arn_prod }}"
          echo "Switching Listener $LISTENER_ARN default action to forward to Green Target Group $GREEN_TG_ARN"
          CURRENT_TG=$(aws elbv2 describe-listeners --listener-arns $LISTENER_PROD_ARN --query 'Listeners[0].DefaultActions[0].TargetGroupArn' --output text --region us-east-1)
          if [ "$CURRENT_TG" == "$TARGET_TG_ARN" ]; then
              echo "Production Listener $LISTENER_PROD_ARN already points to Green TG $TARGET_TG_ARN."
          else
              echo "Modifying Production Listener '$LISTENER_PROD_ARN' -> GREEN Target Group '$TARGET_TG_ARN'..."
              aws elbv2 modify-listener \
                --listener-arn $LISTENER_PROD_ARN \
                --default-actions Type=forward,TargetGroupArn=$TARGET_TG_ARN \
                --region us-east-1 || exit 1 # Salir si falla el cambio
              echo "Production listener modified. GREEN TG is now LIVE."
              echo "Waiting briefly..."
              sleep 30 # Espera corta post-cambio
          fi

      - name: Switch Test Listener to BLUE TG
        id: switch_test
        # Run only if prod switch was successful
        if: steps.switch_prod.outcome == 'success'
        run: |
          echo "Switching Test Listener traffic to the (now inactive) BLUE Target Group..."
          LISTENER_TEST_ARN="${{ needs.deploy-cfn-prod.outputs.listener_test_arn_prod }}"
          TARGET_TG_ARN="${{ needs.deploy-cfn-prod.outputs.tg_blue_arn_prod }}" # Apuntar Test a Blue

          CURRENT_TG=$(aws elbv2 describe-listeners --listener-arns $LISTENER_TEST_ARN --query 'Listeners[0].DefaultActions[0].TargetGroupArn' --output text --region us-east-1)
          if [ "$CURRENT_TG" == "$TARGET_TG_ARN" ]; then
              echo "Test Listener $LISTENER_TEST_ARN already points to Blue TG $TARGET_TG_ARN."
          else
              echo "Modifying Test Listener '$LISTENER_TEST_ARN' -> BLUE Target Group '$TARGET_TG_ARN'..."
              aws elbv2 modify-listener \
                --listener-arn $LISTENER_TEST_ARN \
                --default-actions Type=forward,TargetGroupArn=$TARGET_TG_ARN \
                --region us-east-1 || (echo "::error:: Failed to switch Test Listener $LISTENER_TEST_ARN to Blue TG $TARGET_TG_ARN!" && exit 1) # || echo "::warning:: Failed to switch Test Listener to Blue TG." # Advertir pero no fallar el job
              echo "Test listener modification attempt finished."
          fi

  # --- Job 10: Initiate Rollback Production Listeners if Smoke Tests got failure- ---
  rollback-prod:
    name: Rollback Production Deployment
    needs: [smoke-test-prod, deploy-cfn-prod]
    runs-on: ubuntu-24.04
    environment: production
    # This job will only run if the previous job (smoke-test-prod) fails
    if: always() && needs.smoke-test-prod.result == 'failure' && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Revert/Set Production & Test Listeners
        run: |
          echo "::warning:: A failure occurred during testing or promotion! Initiating listener rollback..."
          LISTENER_PROD_ARN="${{ needs.deploy-cfn-prod.outputs.listener_prod_arn_prod }}"
          LISTENER_TEST_ARN="${{ needs.deploy-cfn-prod.outputs.listener_test_arn_prod }}"
          # El TG que estaba activo ANTES del despliegue actual (obtenido en deploy-prod)
          STABLE_PROD_TG_ARN="${{ needs.deploy-cfn-prod.outputs.currently_active_tg_arn_prod }}"
          # Fallbacks seguros
          BLUE_TG_ARN="${{ needs.deploy-cfn-prod.outputs.tg_blue_arn_prod }}"
          GREEN_TG_ARN="${{ needs.deploy-cfn-prod.outputs.tg_green_arn_prod }}"

          # 1. Determinar a dónde debe apuntar el Listener de Producción (el último estado estable conocido)
          FINAL_PROD_TARGET_TG=$STABLE_PROD_TG_ARN
          if [ -z "$FINAL_PROD_TARGET_TG" ] || [ "$FINAL_PROD_TARGET_TG" == "null" ] ; then
              # Fallback a Blue SOLO si no pudimos obtener el ARN previo
              echo "::warning:: Could not determine the previously active TG ARN for Prod Listener. Defaulting Prod Listener to BLUE TG for safety."
              FINAL_PROD_TARGET_TG=$BLUE_TG_ARN
          fi

          # 2. Determinar a dónde debe apuntar el Listener de Test (Prueba) (el TG opuesto al de producción después del rollback)
          TARGET_TEST_TG_ARN=""
          if [ "$FINAL_PROD_TARGET_TG" == "$BLUE_TG_ARN" ]; then
              TARGET_TEST_TG_ARN=$GREEN_TG_ARN
              echo "Rollback State Target: Prod Listener -> Blue TG, Test Listener -> Green TG"
          elif [ "$FINAL_PROD_TARGET_TG" == "$GREEN_TG_ARN" ]; then
              TARGET_TEST_TG_ARN=$BLUE_TG_ARN
              echo "Rollback State Target: Prod Listener -> Green TG, Test Listener -> Blue TG"
          else
              # Esto no debería pasar si la validación anterior funciona, pero por si acaso
              echo "::error:: CRITICAL: Cannot determine a valid Production TG target for rollback. Cannot reliably set Test Listener."
              # Intentar poner Test en Green como medida desesperada? O mejor fallar? Fallar es más seguro.
              exit 1
          fi

          # Validar ARNs necesarios antes de modificar
          if [ -z "$LISTENER_PROD_ARN" ] || [ -z "$LISTENER_TEST_ARN" ] || [ -z "$FINAL_PROD_TARGET_TG" ] || [ -z "$TARGET_TEST_TG_ARN" ] ; then
              echo "::error:: CRITICAL: Missing essential ARNs for rollback modifications. Manual intervention required."
              exit 1
          fi

          # 3. Modificar Listener de Producción
          echo "Attempting to set Production Listener '$LISTENER_PROD_ARN' -> Target Group '$FINAL_PROD_TARGET_TG'..."
          aws elbv2 modify-listener \
            --listener-arn "$LISTENER_PROD_ARN" \
            --default-actions Type=forward,TargetGroupArn="$FINAL_PROD_TARGET_TG" \
            --region us-east-1 && echo "Production Listener set." || \
            echo "::warning:: Failed to set Production Listener during rollback."

          # 4. Modificar Listener de Prueba
          echo "Attempting to set Test Listener '$LISTENER_TEST_ARN' -> Target Group '$TARGET_TEST_TG_ARN'..."
          # Hacer que falle el paso si este comando falla, es crítico para el siguiente deploy
          aws elbv2 modify-listener \
            --listener-arn "$LISTENER_TEST_ARN" \
            --default-actions Type=forward,TargetGroupArn="$TARGET_TEST_TG_ARN" \
            --region us-east-1 || (echo "::error:: Failed to set Test Listener during rollback!" && exit 1)
          echo "Test Listener set."

          echo "::error:: Pipeline finished with failure after rollback attempt."
          exit 1 # Falla el pipeline explícitamente
